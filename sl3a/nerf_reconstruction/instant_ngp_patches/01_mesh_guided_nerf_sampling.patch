--- a/include/neural-graphics-primitives/testbed.h	2023-08-01 18:23:36
+++ b/include/neural-graphics-primitives/testbed.h	2023-08-01 18:23:36
@@ -377,6 +377,7 @@
 	pybind11::array_t<float> render_to_cpu(int width, int height, int spp, bool linear, float start_t, float end_t, float fps, float shutter_fraction);
 	pybind11::array_t<float> render_with_rolling_shutter_to_cpu(const Eigen::Matrix<float, 3, 4>& camera_transform_start, const Eigen::Matrix<float, 3, 4>& camera_transform_end, const Eigen::Vector4f& rolling_shutter, int width, int height, int spp, bool linear);
 	pybind11::array_t<float> screenshot(bool linear) const;
+	pybind11::array_t<float> sample_mesh_colors(pybind11::array_t<float> verts);
 	void override_sdf_training_data(pybind11::array_t<float> points, pybind11::array_t<float> distances);
 #endif
 
--- a/src/python_api.cu	2023-08-01 18:23:36
+++ b/src/python_api.cu	2023-08-01 18:23:36
@@ -67,6 +67,36 @@
 	dataset.set_training_image(frame_idx, {img_buf.shape[1], img_buf.shape[0]}, (const void*)img_buf.ptr, (const float*)depth_buf.ptr, depth_scale, false, EImageDataType::Float, EDepthDataType::Float);
 }
 
+py::array_t<float> Testbed::sample_mesh_colors(py::array_t<float> verts) {
+	py::buffer_info verts_buf = verts.request();
+
+	if (verts_buf.ndim != 2 || verts_buf.shape[1] != 3) {
+		tlog::error() << "Invalid vertices data";
+		return py::array_t<float>({0, 3});
+	}
+
+	std::vector<Vector3f> verts_cpu(verts_buf.shape[0]);
+
+	for (size_t i = 0; i < verts_cpu.size(); ++i) {
+		Vector3f pos = *((Vector3f*)verts_buf.ptr + i);
+		verts_cpu[i] = pos;
+	}
+
+	m_mesh.verts.resize(verts_cpu.size());
+	m_mesh.verts.memset(0);
+
+	CUDA_CHECK_THROW(cudaMemcpyAsync(m_mesh.verts.data(), verts_cpu.data(), verts_buf.shape[0] * verts_buf.shape[1] * sizeof(float), cudaMemcpyHostToDevice, m_stream.get()));
+	CUDA_CHECK_THROW(cudaStreamSynchronize(m_stream.get()));
+
+	compute_mesh_vertex_colors();
+
+	py::array_t<float> cpucolors({(int)m_mesh.vert_colors.size(), 3});
+
+	CUDA_CHECK_THROW(cudaMemcpy(cpucolors.request().ptr, m_mesh.vert_colors.data() , m_mesh.vert_colors.size() * 3 * sizeof(float), cudaMemcpyDeviceToHost));
+
+	return cpucolors;
+}
+
 void Testbed::override_sdf_training_data(py::array_t<float> points, py::array_t<float> distances) {
 	py::buffer_info points_buf = points.request();
 	py::buffer_info distances_buf = distances.request();
@@ -392,6 +422,7 @@
 			py::arg("json"),
 			py::arg("config_base_path") = ""
 		)
+		.def("sample_mesh_colors", &Testbed::sample_mesh_colors, "Samples vertex colors for a mesh")
 		.def("override_sdf_training_data", &Testbed::override_sdf_training_data, "Override the training data for learning a signed distance function")
 		.def("calculate_iou", &Testbed::calculate_iou, "Calculate the intersection over union error value",
 			py::arg("n_samples") = 128*1024*1024,
