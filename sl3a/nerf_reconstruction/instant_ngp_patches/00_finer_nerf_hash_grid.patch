--- a/configs/nerf/fine_network.json	2023-07-25 15:36:32
+++ b/configs/nerf/fine_network.json	2023-07-25 15:40:54
@@ -0,0 +1,96 @@
+{
+  "loss": {
+    "otype": "Huber"
+  },
+  "optimizer": {
+    "otype": "Ema",
+    "decay": 0.95,
+    "nested": {
+      "otype": "ExponentialDecay",
+      "decay_start": 20000,
+      "decay_interval": 10000,
+      "decay_base": 0.33,
+      "nested": {
+        "otype": "Adam",
+        "learning_rate": 0.01,
+        "beta1": 0.9,
+        "beta2": 0.99,
+        "epsilon": 1e-15,
+        "l2_reg": 1e-06
+      }
+    }
+  },
+  "encoding": {
+    "otype": "HashGrid",
+    "n_levels": 5,
+    "n_features_per_level": 16,
+    "log2_hashmap_size": 20,
+    "base_resolution": 8
+  },
+  "network": {
+    "otype": "FullyFusedMLP",
+    "activation": "ReLU",
+    "output_activation": "None",
+    "n_neurons": 64,
+    "n_hidden_layers": 1
+  },
+  "dir_encoding": {
+    "otype": "Frequency",
+    "n_frequencies": 0
+  },
+  "rgb_network": {
+    "otype": "FullyFusedMLP",
+    "activation": "ReLU",
+    "output_activation": "None",
+    "n_neurons": 64,
+    "n_hidden_layers": 2
+  },
+  "distortion_map": {
+    "resolution": [
+      32,
+      32
+    ],
+    "optimizer": {
+      "otype": "ExponentialDecay",
+      "decay_start": 10000,
+      "decay_interval": 5000,
+      "decay_end": 25000,
+      "decay_base": 0.33,
+      "nested": {
+        "otype": "Adam",
+        "learning_rate": 0.0001,
+        "beta1": 0.9,
+        "beta2": 0.99,
+        "epsilon": 1e-08
+      }
+    }
+  },
+  "envmap": {
+    "loss": {
+      "otype": "RelativeL2"
+    },
+    "optimizer": {
+      "otype": "Ema",
+      "decay": 0.99,
+      "nested": {
+        "otype": "ExponentialDecay",
+        "decay_start": 10000,
+        "decay_interval": 5000,
+        "decay_base": 0.33,
+        "nested": {
+          "otype": "Adam",
+          "learning_rate": 0.01,
+          "beta1": 0.9,
+          "beta2": 0.99,
+          "beta3": 0.9,
+          "beta_shampoo": 0.0,
+          "epsilon": 1e-10,
+          "identity": 0.0001,
+          "cg_on_momentum": false,
+          "frobenius_normalization": true,
+          "l2_reg": 1e-10
+        }
+      }
+    }
+  }
+}
--- a/dependencies/tiny-cuda-nn/include/tiny-cuda-nn/encodings/grid.h	2023-07-25 15:36:32
+++ b/dependencies/tiny-cuda-nn/include/tiny-cuda-nn/encodings/grid.h	2023-07-25 15:40:54
@@ -1488,7 +1488,8 @@
 		case 2: return create_grid_encoding_templated_2<T, 2, HASH_TYPE>(n_dims_to_encode, encoding);
 		case 4: return create_grid_encoding_templated_2<T, 4, HASH_TYPE>(n_dims_to_encode, encoding);
 		case 8: return create_grid_encoding_templated_2<T, 8, HASH_TYPE>(n_dims_to_encode, encoding);
-		default: throw std::runtime_error{"GridEncoding: n_features_per_level must be 1, 2, 4, or 8."};
+		case 16: return create_grid_encoding_templated_2<T, 16, HASH_TYPE>(n_dims_to_encode, encoding);
+		default: throw std::runtime_error{"GridEncoding: n_features_per_level must be 1, 2, 4, 8, 16."};
 	}
 }
 
